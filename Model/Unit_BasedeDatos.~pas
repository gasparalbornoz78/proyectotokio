unit Unit_BasedeDatos;



interface
uses SysUtils,Classes,SqlExpr,Variants,DB,Windows,
  Contnrs,DBTables,ADODB,IniFiles,
    ActiveX,Dialogs,ComObj,Controls;

const ADO='ADO';
const MySQL='MySQL';
const Advantage='Advantage';
const ArchivoIni='config.ini';
const StrDataDirectory='DataDirectory';
const StrDefaultDir='DefaultDir';
const DRIVERID='DriverId';

const StrServer='SERVER';
const BDE='BDE';
const NumColumnas=7;
const AnchoTexto=80;

//-------tipos para impresión DOS-----

type TColumna = Record
       XPosicion: word;
       Ancho: word;
     End;


type TPrintDOS=class
  private
    Linea:String;
    Columnas: Array[1..NumColumnas] of TColumna;
  public
    constructor Create;
    procedure AbrirImpresion;
    procedure CerrarImpresion;
    procedure CrearColumna(Numero:word;Posicion:word;ancho:word);
    procedure AgregarTexto(columna:word;texto:string);
    procedure SaltarLinea;
    procedure ImprimirLinea;
end;

//----------------------------------

type
 TAfterInsertEventConexion = procedure (SentenciaSQL:String;
      SentenciaNum:integer) of object;
 TConexionDB= class
  private
    Conexion:TCustomConnection;
    TipoConexion:String;
    BasedeDatos:String;
    StrSQL:TStrings;
    ConnectionString:WideString;
    ActiveTrans:boolean;
    SucursalActiva:Integer;
    constructor Create;overload;
    procedure ConexionCerrada(Sender:TObject);
    function InsertAdvantage:Integer;
    function InsertMysql(StrSQL:TStrings):Integer;
    procedure ManejadorErrorTransaccion(E:Exception);
    function GetConexion:TADOConnection;
  public
    EventoDespuesInsertar:TAfterInsertEventConexion;
    ODBC:String;
    property AccesoADO:TADOConnection read GetConexion;
    property Sucursal:integer read SucursalActiva;
    constructor Create(ConexionTipo:String;TipoDB:String;
            ConnectionStr:WideString);overload;
    constructor Create(ConexionTipo:String;TipoDB:String;//ACTUALIZAR 06-07-06
            ConnectionStr:WideString;ODBC:string
            ;DirPedidosSuc:string;ConexionCerrada:boolean);overload;
    destructor Destroy; override;
    procedure DBConectar;
    procedure CerrarConexion;
    procedure EjecutarSelect(StrSql:wideString;DBSource:TComponent);overload;
    function EjecutarSelect(StrSql:wideString;Cerrado:boolean):TDataSet;overload;
    function EjecutarAct(StrSql:widestring):Integer;overload;
    function EjecutarAct(StrSQL:TStrings):Integer;overload;
    function EjecutarAct:Integer;overload;
    function StrConexion(Directorio:WideString):WideString;
    procedure AddAct(sql:String);
    procedure IniciarTransaccion;
    procedure CerrarTransaccion;
    procedure DesHacerTransaccion;
 end;

procedure SetPaperSize (ancho,largo: Integer);
function StrConexion(Directorio:WideString):WideString;
function StrConexionODBCWindows(Directorio:WideString):WideString;
function StationNumber:byte;
Function GetNetUserName : String;
Function GetNetFullName(User_Name : String) : String;


var
  ConexionDB:TConexionDB;
  ConexionDBAdvPedidosSuc:TConexionDB;
  AplicacionIni:TIniFile;
  ArchivoPrn:TextFile;
  varPERCEPCIONIVA:real;
  varPERCEPCIONIVAMONTOMAX:real;
  DirectorioPedidosSuc:String;
  DirectorioRemitosIngresoSuc:String;
implementation
 uses Printers,Provider;

//*************Procedimientos y Funciones de la Clase TConexionDB****

constructor TConexionDB.Create;
var separadordecimal:char;
begin
 inherited create;
 StrSQL:=TStringList.Create;
 TipoConexion:=AplicacionIni.ReadString('DataBase','Acceso','ADO');
 BasedeDatos:=AplicacionIni.ReadString('DataBase','TipoDB','Advantage');
 ConnectionString:=AplicacionIni.ReadString(BasedeDatos,
        'ConnectionString','Advantage');
 ODBC:=AplicacionIni.ReadString('ODBC','DSN','');
 separadordecimal:=decimalseparator;
 decimalseparator:=separadordecimal;
 DirectorioRemitosIngresoSuc:=AplicacionIni.ReadString('Directorios','RemitoIngresoSuc','');
 DBConectar;
end;

constructor TConexionDB.Create(ConexionTipo:String;TipoDB:String;
      ConnectionStr:WideString;ODBC:string
      {Este constructor no es usado actualmente su estado es Deprecated}
      ;DirPedidosSuc:string;ConexionCerrada:boolean);//ACTUALIZAR 06-07-06
begin
 inherited Create;
 StrSQL:=TStringList.Create;
 TipoConexion:=ConexionTipo;
 BasedeDatos:=TipoDB;
 ConnectionString:=ConnectionStr;
 self.ODBC:=ODBC;
 CoInitialize(nil);
 if Not ConexionCerrada then
     DBConectar;
 DirectorioPedidosSuc:=DirPedidosSuc;
end;

constructor TConexionDB.Create(ConexionTipo:String;TipoDB:String;
      ConnectionStr:WideString);
begin
 inherited Create;
 StrSQL:=TStringList.Create; 
 TipoConexion:=ConexionTipo;
 BasedeDatos:=TipoDB;
 ConnectionString:=ConnectionStr;
 DBConectar;
end;



destructor TConexionDB.Destroy;
begin
 FreeAndNil(Conexion);
 StrSql.Free;
 inherited Destroy;

end;



function TConexionDB.StrConexion(Directorio:WideString):WideString;
var indexInicio,indexFinal:integer;
    ArchIni:TIniFile;
    StringConexion:WideString;
begin
  StringConexion:=ArchIni.ReadString('Advantage','ConnectionString','');
  indexInicio:=Pos(StrDataDirectory,ConnectionString);
  indexInicio:=indexInicio+length(StrDataDirectory);
  indexFinal:=Pos(StrServer,ConnectionString);
  Delete(ConnectionString,indexInicio,indexfinal-indexinicio);
  Insert('='+directorio+';',ConnectionString,indexInicio);
  Result:=ConnectionString;
  ArchIni.Free;
end;

procedure TConexionDB.CerrarConexion;
begin
 if TipoConexion=BDE then
   TDataBase(Conexion).Connected:=false;
 if TipoConexion=ADO then
   TADOConnection(Conexion).Close;   
end;


function TConexionDB.GetConexion:TADOConnection;
begin
  Result:=TADOConnection(Conexion);
end;


procedure TConexionDB.ConexionCerrada(Sender:TObject);
begin
  ShowMessage('La Conexión con la Base de Datos se Perdió');
end;


procedure TConexionDB.DBConectar;
begin
 if Trim(ConnectionString)='' then
     raise Exception.Create('La cadena de conexión, AliasName o Nombre de la Conexión es incorrecto');
 //----- Conexión segun ADO----
 if TipoConexion =ADO then
  begin
   Conexion:=TADOConnection.Create(nil);
   //Conexion.AfterDisconnect:=ConexionCerrada;
   //if AplicacionIni.ReadString('DataBase','TipoDB','Advantage') ='MySQL' then
   if BasedeDatos=MySQL then
      //TADOConnection(Conexion).ConnectionString :='Provider=MSDASQL.1;Persist Security Info=False;User ID=root;Data Source=conectar;Extended Properties="DATABASE=test;DSN=conectar;OPTION=2048;PORT=0;SERVER=192.160.0.165;UID=root"';
     begin
      TADOConnection(Conexion).ConnectionString :=
        //AplicacionIni.ReadString('MySQL','ConnectionString','');
        ConnectionString;
      //TADOConnection(Conexion).DefaultDatabase :='test';
     end;
   if BasedeDatos =Advantage then
      TADOConnection(Conexion).ConnectionString :=
        //AplicacionIni.ReadString('Advantage','ConnectionString','');
        ConnectionString;

   TADOConnection(Conexion).LoginPrompt:=false;
   try
     TADOConnection(Conexion).connected:=true;
   except
      on E:EOleException do
          begin
            ShowMessage('EL MENSAJE DE ERROR ES: '+
              E.Message);
            Halt;
          end;
      on E:Exception do
        begin
          raise Exception.Create(E.Message);
        end;

   end;
  end;
  //---------------------FIN ADO
 //-----------CONEXION BDE----------
 if TipoConexion = BDE then
  begin
    if Trim(ODBC)='' then
            raise Exception.Create('No puede Realizarse la '
              +' Conexión con el Servidor. Archivo de Inicialización Inexistente'
              +' o tiene datos Incorrectos.');
    Conexion:=TDataBase.Create(nil);
    //if BasedeDatos=Advantage then
    //  begin
        Conexion.LoginPrompt:=false;
        TDataBase(Conexion).AliasName:=ODBC;
        TDataBase(Conexion).DatabaseName:='DBLOCAL';
        TDataBase(Conexion).LoginPrompt:=false;
        //TDataBase(Conexion).Params.Add('USER NAME=ADSSYS');
        try
          TDataBase(Conexion).Open;
        except
          on E:EDataBaseError do
           begin
            MessageDlg(PChar('Ocurrión un Error al Conectarse con '
              +' la base de datos. Consulte con su Administrador'
              +'. El mensaje de error es: '+E.Message
              )
              , mtError,[mbOk], 0);
              Halt;
           end;
          on E:Exception do
            begin
              DataBaseError(E.Message,Conexion);
            end;
        end;
      //end; //end del if de Advantage

  end; //end del BDE
  //---------------FIN BDE------
end;

//function TConexionDB.EjecutarSelect (StrSql:String):TDataSet;
//var Consulta:TADOQuery;
//begin
// Consulta:=nil;
// if AplicacionIni.ReadString('DataBase','Acceso','ADO') ='ADO' then
//  begin
//   Consulta:=TADOQuery.Create(nil);
//   TADOQuery(Consulta).Connection:=TADOConnection(Conexion);
//   EjecutarSelect(StrSQL,Consulta);
//  end;
//  Result:=Consulta;
//end;
//
{function TConexionDB.EjecutarSelect(StrSql:String;AOwner:TComponent):TDataSet;
var DataSet:TDataSet;
begin
 //DataSet:=nil;
 //------Conexion segun ADO------
 if TipoConexion=ADO then
    begin
      Dataset:= TADOQuery.Create(AOwner);
      with TADOQuery(DataSet) do
         begin
          Connection:=TADOConnection(Conexion);
          close;
          sql.Clear;
          sql.Add(StrSql);
          Open;
         end;
     end;
 //-----------------------
 //----------------Conexion Segun BDE------------
 if TipoConexion=BDE then
    begin
      DataSet:=TQuery.Create(AOwner);
      with TQuery(DataSet) do
        begin
          DatabaseName:=TDataBase(Conexion).DatabaseName;
          sql.Clear;
          sql.Add(StrSql);
          try
            Open;
          except
            on E:EDataBaseError do
             begin
                  DatabaseError('Error al Consultar la base de datos.'
                    +' Consulte con su Administrador.'
                    +' Código de error: '
                    +inttostr(EDBEngineError(E).Errors[0].ErrorCode)
                    +'. Mensaje: '+E.Message
                    ,DataSet);
              end;
            on E:Exception do
                begin
                  raise Exception.Create(E.Message);
                end;
          end;
        end;
    end;
 //----------------------------------------------
 Result:=DataSet;

end; }

function TConexionDB.EjecutarSelect(StrSql:wideString;Cerrado:boolean):TDataSet;
var DataSet:TDataSet;
begin
 //DataSet:=nil;
 //------Conexion segun ADO------
 if TipoConexion=ADO then
    begin
      Dataset:= TADOQuery.Create(nil);
      with TADOQuery(DataSet) do
         begin
          Connection:=TADOConnection(Conexion);
          close;
          Parameters.ParseSQL(StrSql,True);
          sql.Clear;
          sql.Add(StrSql);
          if Not Cerrado then
              Open;
         end;
     end;
 //-----------------------
 //----------------Conexion Segun BDE------------
 if TipoConexion=BDE then
    begin
      DataSet:=TQuery.Create(nil);
      with TQuery(DataSet) do
        begin
          DatabaseName:=TDataBase(Conexion).DatabaseName;
          sql.Clear;
          sql.Add(StrSql);
          try
            Open;
          except
            on E:EDataBaseError do
             begin
//                if E is EDBEngineError then
//                  begin
//                    if EDBEngineError(E).Errors[0].ErrorCode=1 then
//                      MessageDlg(PChar('Ocurrión un Error al Conectarse con '
//                        +' la base de datos. Consulte con su Administrador')
//                        , mtError,[mbOk], 0);
//                  end
//                else
                  DatabaseError('Error al Consultar la base de datos.'
                    +' Consulte con su Administrador.'
                    +' Código de error: '
                    +inttostr(EDBEngineError(E).Errors[0].ErrorCode)
                    +'. Mensaje: '+E.Message
                    ,DataSet);
              end;
            on E:Exception do
                begin
                  raise Exception.Create(E.Message);
                end;
          end;
        end;
    end;
 //----------------------------------------------
 Result:=DataSet;
end;

procedure TConexionDB.EjecutarSelect(StrSql:WideString;
    DBSource:TComponent);
begin
 if DBSource is TDataSource then
 with TDataSource(DBSource) Do
  begin
   //if AplicacionIni.ReadString('DataBase','Acceso','ADO') ='ADO' then
   if TipoConexion=ADO then
      begin
        if DataSet = nil  then
          Dataset:= TADOQuery.Create(DBSource);
        with TADOQuery(DataSet) do
           begin
            Connection:=TADOConnection(Conexion);
            close;
            sql.Clear;
            sql.Add(StrSql);
            Open;
        end;
     end;
     //----------------Conexion Segun BDE------------
   if TipoConexion=BDE then
     begin
        if DataSet = nil then
          begin
            DataSet:=TQuery.Create(nil);
            TQuery(DataSet).DatabaseName:=TDataBase(Conexion).DatabaseName;
          end;
        with TQuery(DataSet) do
          begin
            close;
            sql.Clear;
            sql.Add(StrSql);
            try
              Open;
            except
              on E:EDataBaseError do
               begin
                  //if E is EDBEngineError then
                  //  if EDBEngineError(E).Errors[0].ErrorCode=1 then

                  DatabaseError('Ocurrión un Error al Conectarse con '
                        +' la base de datos. Consulte con su Administrador.'
                        +' Código de error: '
                        +inttostr(EDBEngineError(E).Errors[0].ErrorCode)
                        +'. Mensaje: '+E.Message
                        ,Conexion);
               end;
            end;
          end;
      end;
     //----------------------------------------------
  end;// end del  With Datasource do

 if DBSource is TDataSetProvider then
 with TDataSetProvider(DBSource) Do
  begin
   //if AplicacionIni.ReadString('DataBase','Acceso','ADO') ='ADO' then
   if Assigned(TDataSetProvider(DBSource).DataSet) then
      TDataSetProvider(DBSource).DataSet.Free;
   if TipoConexion=ADO then
      begin
        if DataSet = nil  then
          Dataset:= TADOQuery.Create(DBSource);
        with TADOQuery(DataSet) do
           begin
            Connection:=TADOConnection(Conexion);
            close;
            sql.Clear;
            sql.Add(StrSql);
            Open;
           end;
      end;
     //----------------Conexion Segun BDE------------
   if TipoConexion=BDE then
     begin
        if DataSet = nil then
          begin
            DataSet:=TQuery.Create(nil);
            TQuery(DataSet).DatabaseName:=TDataBase(Conexion).DatabaseName;
          end;
        with TQuery(DataSet) do
          begin
            close;
            sql.Clear;
            sql.Add(StrSql);
            try
              Open;
            except
              on E:EDataBaseError do
               begin
                  //if E is EDBEngineError then
                  //  if EDBEngineError(E).Errors[0].ErrorCode=1 then

                  DatabaseError('Ocurrión un Error al Conectarse con '
                        +' la base de datos. Consulte con su Administrador.'
                        +' Código de error: '
                        +inttostr(EDBEngineError(E).Errors[0].ErrorCode)
                        +'. Mensaje: '+E.Message
                        ,Conexion);
               end;
            end;
          end;
      end;
     //----------------------------------------------
  end;// end del  With Datasource do


end;




procedure TConexionDB.AddAct(sql:string);
begin
  StrSQL.Add(sql);
end;

function TConexionDB.EjecutarAct:Integer;
var filasafectadas:integer;
begin
      if BasedeDatos=Advantage then
        filasafectadas:=InsertAdvantage;
      if BasedeDatos=MySQL then
        filasafectadas:=InsertMysql(StrSql);
  StrSql.Clear;      
  Result:=filasafectadas;      
end;



function TConexionDB.EjecutarAct(StrSql:TStrings):Integer;
var  ADOquery:TADOQuery;
     Query:TQuery;
      EMsg:String;
     i:integer;
     filasafectadas:integer;
begin
//  if AplicacionIni.ReadString('DataBase','Acceso','ADO') ='ADO' then
//  if TipoConexion=ADO then
//    begin
      //if AplicacionIni.ReadString('DataBase','DataBase','Advantage') ='MySQL' then
      if BasedeDatos=Advantage then
        filasafectadas:=InsertAdvantage;
      //if AplicacionIni.ReadString('DataBase','DataBase','Advantage') ='Advantage' then
      if BasedeDatos=MySQL then
        filasafectadas:=InsertMysql(StrSql);
   StrSQL.Clear;
   Result:=Filasafectadas;
//    end;
end;

function TConexionDB.InsertMysql(StrSQL:TStrings):Integer;
var ADOQuery:TADOQuery;
    Query:TQuery;
    i:integer;
    EMsg:String;
    afectados:integer;
begin
  afectados:=0;
  if TipoConexion=ADO then
   begin
      ADOQuery:=TADOQuery.Create(nil);
      ADOQuery.Connection:=TADOConnection(Conexion);
      ADOQuery.ParamCheck:=False;
      ADOQuery.ExecuteOptions:=[eoExecuteNoRecords ]	;
      try
        with ADOQuery do
         begin
           SQL.Text:='set wait_timeout=280';
           ExecSQL;
           TADOConnection(Conexion).BeginTrans;
           for i:=0 to StrSql.Count-1 do
           begin
             SQL.Clear;
             SQL.Add(StrSQL[i]);
             ADOQuery.ExecSQL;;
             afectados:=RowsAffected;
             if Assigned(EventoDespuesInsertar) then
               EventoDespuesInsertar(StrSql[i],i);
            end;
           TADOConnection(Conexion).CommitTrans;
           StrSQL.Clear;
         end;
      except
         on E:EOleException do
            begin
              TADOConnection(Conexion).RollbackTrans;
              StrSQL.Clear;
              EMsg:=E.Message+'. EL NUMERO DE LINEA CON ERRORES ES: '+IntToStr(i);
              if Pos('Lost connection',EMsg)>0 then
                 ShowMessage('La conexión con el servidor se Perdió')
              else
                DataBaseError(EMsg,Conexion);
            end;
      end;
      ADOQuery.sql.Clear;
      Result:=ADOQuery.RowsAffected;
      ADOQuery.SQL.Clear;
      ADOQuery.SQL.Add('set wait_timeout=28800');
      ADOQuery.ExecSQL;
      ADOQuery.free;
   end; //FIN DEL IF DE ADO
            //si la conexión es BDE se hace lo siguiente
  if TipoConexion=BDE then
    begin
      Query:=TQuery.Create(nil);
      Query.DataBaseName:=TDataBase(Conexion).DatabaseName;
      try
      with Query do
         begin
           SQL.Add('set wait_timeout=2800;');
           TDataBase(Conexion).StartTransaction;
           for i:=0 to StrSql.Count-1 do
           begin
             SQL.Add(StrSql[i]);
             ExecSQL;
             afectados:=Query.RowsAffected;
             if Assigned(EventoDespuesInsertar) then
               EventoDespuesInsertar(StrSql[i],i);
            end;
           TDataBase(Conexion).Commit;
           StrSql.Clear;
         end;
      except
         on E:EDataBaseError do
            begin
              if E is EDBEngineError then
                begin
                //  if EDBEngineError(E).Errors[0].ErrorCode=1 then
                //    begin
                    StrSQL.Clear;
                    DatabaseError('Ocurrión un Error al Modificar '
                          +' los datos. Consulte con su Administrador.'
                          +' El código de error es: '
                          +inttostr(EDBEngineError(E).Errors[0].ErrorCode)
                          +'. Mensaje: '+E.Message
                          ,Conexion);
                 //     Halt;
                //    end;
                end
              else
                DatabaseError(E.Message,Conexion);
            end;
         on E:Exception do
          begin
            raise Exception.Create(E.Message);
          end;
      end;
      //ADOQuery.sql.Clear;
      //ADOQuery.SQL.Add('set wait_timeout=28800');
      //ADOQuery.ExecSQL;
      ADOQuery.free;
    end;//en del BDE
  Result:=afectados;  
end;

procedure TConexionDB.ManejadorErrorTransaccion(E:Exception);
begin
  if self.TipoConexion=BDE then
    begin
      TDataBase(Conexion).Rollback;
      if E is EDataBaseError then
        DataBaseError(E.Message,Conexion);
    end;
end;

function TConexionDB.InsertAdvantage:Integer;
var ADOQuery:TADOQuery;
    Query:TQuery;
    EMsg:String;
    i:integer;
    filasafectadas:integer;
begin
   //----Conexion segun ADO-------
  if TipoConexion=ADO then
   begin
      ADOQuery:=TADOQuery.Create(nil);
      ADOQuery.Connection:=TADOConnection(Conexion);
      try
        with ADOQuery do
         begin
           //if TADOConnection(Conexion).InTransaction then
           //   TADOConnection(Conexion).RollbackTrans;
           //TADOConnection(Conexion).BeginTrans;
           for i:=0 to StrSql.Count-1 do
            begin
             sql.Clear;
             sql.Add(StrSql[i]);
               filasafectadas:=ExecSQL;
             if Assigned(EventoDespuesInsertar) then
                EventoDespuesInsertar(StrSql[i],i);
            end;
           //TADOConnection(Conexion).CommitTrans;

         end;
      except
         on E:EOleException do
            begin
              EMsg:=E.Message;
              if Pos('Lost connection',EMsg)>0 then
                 ShowMessage('La conexión con el servidor se Perdió')
              else
                begin
                 DataBaseError(EMsg,Conexion);
                 //TADOConnection(Conexion).RollbackTrans;
                end;
            end;
         on E:Exception do
          begin
            raise Exception.Create(E.Message);
          end;
      end;
     ADOQuery.free;
   end;
 //--------------------------------------------
 //--------Conexión  segun BDE ---------

  if TipoConexion=BDE then
    begin
      Query:=TQuery.Create(nil);
      try
        with Query do
         begin
           //if TDataBase(Conexion).InTransaction then
              //TDataBase(Conexion).Rollback;
           //TDataBase(Conexion).StartTransaction;
           Query.DatabaseName:=TDataBase(Conexion).DatabaseName;
           for i:=0 to StrSql.Count-1 do
            begin
             sql.Clear;
             sql.Add(StrSql[i]);
             ExecSQL;
             filasafectadas:=StrSQL.Count;
             if Assigned(EventoDespuesInsertar) then
                EventoDespuesInsertar(StrSql[i],i);
            end;
           //TDataBase(Conexion).Commit;
         end;
      except
         on E:EDataBaseError do
            begin
              if E is EDBEngineError then
                begin
                //  if EDBEngineError(E).Errors[0].ErrorCode=1 then
                //    begin
                    StrSQL.Clear;
                    DatabaseError('Ocurrión un Error al Modificar '
                          +' los datos. Consulte con su Administrador.'
                          +' El código de error es: '
                          +inttostr(EDBEngineError(E).Errors[0].ErrorCode)
                          +'. Mensaje: '+E.Message
                          ,Conexion);
                 //     Halt;
                //    end;
                end
              else
                DatabaseError(E.Message,Conexion);
            end;
         on E:Exception do
          begin
            raise Exception.Create(E.Message);
          end;
      end;
     Query.free;
    end;
  //-----------------------------------------
  Result:=filasafectadas;
end;


procedure TConexionDB.IniciarTransaccion;
var ADOQuery:TADOQuery;
begin
  if TipoConexion=ADO then
   begin
      ADOQuery:=TADOQuery.Create(nil);
      ADOQuery.Connection:=TADOConnection(Conexion);
      ADOQuery.ParamCheck:=False;
      ADOQuery.ExecuteOptions:=[eoExecuteNoRecords ]	;
      try
        with ADOQuery do
         begin
           SQL.Text:='set wait_timeout=2800';
           ExecSQL;
           TADOConnection(Conexion).BeginTrans;
         end;
      except
         on E:EOleException do
            begin
              TADOConnection(Conexion).RollbackTrans;
              //StrSQL.Clear;
              if Pos('Lost connection',E.Message)>0 then
                 ShowMessage('La conexión con el servidor se Perdió')
              else
                DataBaseError(E.Message,Conexion);
            end;
      end;
      ADOQuery.free;
   end; //FIN DEL IF DE ADO
  
end;

procedure TConexionDB.CerrarTransaccion;
var ADOQuery:TADOQuery;
begin
  if TipoConexion=ADO then
   begin
      ADOQuery:=TADOQuery.Create(nil);
      ADOQuery.Connection:=TADOConnection(Conexion);
      ADOQuery.ParamCheck:=False;
      ADOQuery.ExecuteOptions:=[eoExecuteNoRecords ]	;
      try
        if TADOConnection(Conexion).InTransaction then
         TADOConnection(Conexion).CommitTrans;
      except
         on E:EOleException do
            begin
              if TADOConnection(Conexion).InTransaction then
                TADOConnection(Conexion).RollbackTrans;
              if Pos('Lost connection',E.Message)>0 then
                 ShowMessage('La conexión con el servidor se Perdió')
              else
                DataBaseError(E.Message,Conexion);
            end;
      end;
      ADOQuery.sql.Clear;
      ADOQuery.SQL.Clear;
      ADOQuery.SQL.Add('set wait_timeout=28800');
      ADOQuery.ExecSQL;
      ADOQuery.free;
   end; //FIN DEL IF DE ADO
end;


procedure TConexionDB.DeshacerTransaccion;
var ADOQuery:TADOQuery;
begin
  if TipoConexion=ADO then
   begin
      try
         if TADOConnection(Conexion).InTransaction then
           TADOConnection(Conexion).RollbackTrans;
      except
         on E:EOleException do
            begin
              if Pos('Lost connection',E.Message)>0 then
                 ShowMessage('La conexión con el servidor se Perdió')
              else
                DataBaseError(E.Message,Conexion);
            end;
      end;
   end; //FIN DEL IF DE ADO
end;


function TConexionDB.EjecutarAct(StrSql:widestring):Integer;
var ADOQuery:TADOQuery;
begin
  if TipoConexion=ADO then
   begin
      ADOQuery:=TADOQuery.Create(nil);
      ADOQuery.Connection:=TADOConnection(Conexion);
      ADOQuery.ParamCheck:=False;
      ADOQuery.ExecuteOptions:=[eoExecuteNoRecords ]	;
      try
        with ADOQuery do
         begin
            SQL.Text:=StrSql;
            Result:=ADOQuery.ExecSQL;
         end;
      except
         on E:EOleException do
            begin
              if TADOConnection(Conexion).InTransaction then
                  TADOConnection(Conexion).RollbackTrans;
              if Pos('Lost connection',E.Message)>0 then
                 ShowMessage('La conexión con el servidor se Perdió')
              else
                //DataBaseError(E.Message,Conexion);
                raise Exception.Create(E.message);
            end;
      end;
      ADOQuery.free;
   end; //FIN DEL IF DE ADO

end;




//-------------------------------------Funciones y Proc de TPrintDOS

constructor TPrintDOS.Create;
begin
 inherited create;
 linea:=StringOfChar(' ',80);
end;


procedure TPrintDOS.AgregarTexto(columna:word;texto:string);
var ancho,index,i,j:word;

begin
 j:=0;

 index:= Columnas[columna].xposicion;
 ancho:= Columnas[columna].ancho;
 for i:=index to index+ancho do
    begin
      inc(j);
      if j>length(texto) then
          break;
      linea[i]:=texto[j];
    end;
end;

procedure TPrintDOS.ImprimirLinea;
var lprint:string;
begin
  lprint:=linea;
  if trim(linea)<>'' then
    begin
      WriteLn(ArchivoPrn,lprint);
      linea:=StringOfChar(' ',80);
    end;
end;

procedure TPrintDOS.SaltarLinea;
begin
  WriteLn(ArchivoPrn,#10)
end;

procedure TPrintDOS.CrearColumna(Numero:word;Posicion:word;ancho:word);
begin
 if Posicion>Anchotexto then
    Posicion:=AnchoTexto;
 Columnas[Numero].XPosicion:=Posicion;
 if Posicion+ancho > AnchoTexto then
    ancho:=0;
 Columnas[Numero].Ancho:=AnchoTexto;
end;

procedure TPrintDOS.AbrirImpresion;
begin
  AssignPrn(ArchivoPrn);
  Rewrite(ArchivoPrn);
end;

procedure TPrintDOS.CerrarImpresion;
begin
 System.CloseFile(ArchivoPrn);
end;

procedure SetPaperSize (ancho,largo : Integer);
{aqui se define el tamaño del papel}
var
   ADevice, ADriver, APort : array [0..255] of Char;
   ADeviceMode : THandle;
   DevMode : PDevMode;
begin
   with Printer do
      begin
         GetPrinter (ADevice, ADriver, APort, ADeviceMode);
         SetPrinter (ADevice, ADriver, APort, 0);
         GetPrinter (ADevice, ADriver, APort, ADeviceMode);
         DevMode := GlobalLock(ADeviceMode);
         if not Assigned(DevMode) then
            ShowMessage('Ha entrado en -> if not Assigned(DevMode) ...')
         else
            begin
               with DevMode^ do
                  begin
                     dmPaperSize := DMPAPER_User;
                     dmPaperLength := largo;
                     dmPaperWidth:= ancho;
                	   dmFields := dmFields or DM_PAPERSIZE or DM_PAPERLength or DM_PAPERWidth;
                  end;
               GlobalUnLock(ADeviceMode);
               SetPrinter(ADevice, ADriver, APort, ADeviceMode);
           end;
      end;
  SetMapMode(Printer.Handle,MM_LoMetric);
end;


function StrConexion(Directorio:WideString):WideString;
var indexInicio,indexFinal:integer;
    ArchIni:TIniFile;
    ConnectionString:WideString;
begin
  ArchIni:=TIniFile.Create(ExtractFilePath(ParamStr(0)) + ArchivoIni);
  ConnectionString:=ArchIni.ReadString('Advantage','ConnectionString','');
  if Trim(ConnectionString)='' then
    begin
      ConnectionString:=ArchIni.ReadString('Advantage','ConnectionStringODBC','');
      indexInicio:=Pos(StrDefaultDir,ConnectionString);
      indexInicio:=indexInicio+length(StrDefaultDir);
      indexFinal:=Pos(DRIVERID,ConnectionString);
    end
  else
    begin
      indexInicio:=Pos(StrDataDirectory,ConnectionString);
      indexInicio:=indexInicio+length(StrDataDirectory);
      indexFinal:=Pos(StrServer,ConnectionString);
    end;
  Delete(ConnectionString,indexInicio,indexfinal-indexinicio);
  Insert('='+directorio+';',ConnectionString,indexInicio);
  Result:=ConnectionString;
  ArchIni.Free;
end;

function StrConexionODBCWindows(Directorio:WideString):WideString;
var indexInicio,indexFinal:integer;
    ArchIni:TIniFile;
    ConnectionString:WideString;
begin
  ArchIni:=TIniFile.Create(ExtractFilePath(ParamStr(0)) + ArchivoIni);
  ConnectionString:=ArchIni.ReadString('ODBCDBF','ConnectionString','');
  indexInicio:=Pos(StrDefaultDir,ConnectionString);
  indexInicio:=indexInicio+length(StrDefaultDir);
  indexFinal:=Pos(StrServer,ConnectionString);
  Delete(ConnectionString,indexInicio,indexfinal-indexinicio);
  Insert('='+directorio+';',ConnectionString,indexInicio);
  Result:=ConnectionString;
  ArchIni.Free;
end;


//---- funciones para nw----------------------------------

function StationNumber:byte;  { MY logical Station(connection)-Number }
var
 RetVal : Byte;
begin
 asm
   MOV AH, $DC;
   INT 21H
   MOV RetVal, AL;
 end;
 Result := Retval;
end;


Function GetNetUserName : String;
const cero=0;
var
  Request : record                     { Request buffer for "Get Conn Info" }
    Len  : Word;                       { Buffer length - 2                  }
    Func : Byte;                       { Subfunction number ( = $16 )       }
    Conn : Byte                        { Connection number to be researched }
  end;

  Reply    : record                    { Reply buffer for "Get Conn Info"   }
    Len    : Word;                     { Buffer length - 2                  }
    ID     : Longint;                  { Object ID (hi-lo order)            }
    Obj    : Word;                     { Object type (hi-lo order again)    }
    Name   : array[ 1..48 ] of Byte;   { Object name as ASCII string        }
    Time   : array[ 1.. 7 ] of Byte;   { Y, M, D, Hr, Min, Sec, DOW         }
                                       { Y < 80 is in the next century      }
                                       { DOW = 0 -> 6, Sunday -> Saturday   }
    Filler : Byte                      { Call screws up without this!       }
  end;

  W      : Word;
  RetVal : Byte;

begin
                                       { "Get Connection Information"       }
  with Request do                      { Initialize request buffer:         }
  begin
    Len := 2;                                    { Buffer length,           }
    Func := $16;                                 { API function,            }
    Conn := StationNumber                    { Returned in previous call!         }
  end;

  Reply.Len := SizeOf( Reply ) - 2;    { Initialize reply buffer length     }

  asm
   push ds
   push ss
   push es
    MOV AH, $E3;                         { Connection Services API call       }
    LEA SI, Request               { Location of request buffer         }
    PUSH SS
    POP DS
    LEA DI, Reply                { Location of reply buffer           }
    PUSH SS
    POP ES
    INT 21H
    MOV RetVal, AL
    pop ES
    pop SS
    pop DS
  end;

  if ( RetVal = 0 )                        { Success code returned in AL   }
       and ( Hi( Reply.Obj ) = 1 )          { Obj of 1 is a user,           }
       and ( Lo( Reply.Obj ) = 0 ) then     {   stored Hi-Lo                }
    with Reply do
    begin
      Move( Name, Result[ 1 ], 48 );           { Convert ASCIIZ to string }
      //Result[ 0 ] := #48;
      SetLength(Result,48);
      W := 1;
      while ( Result[ W ] <> #0 )
            and ( W < 48 ) do
        Inc( W );
      SetLength (Result, W - 1 )
    end
  else
    Result := ''
end;


Function GetNetFullName(User_Name : String) : String;
Type
  RequestBuffer = Record
    RequestBufferLength : Word;
    Code                : Byte;
    ObjectType          : Word;
    ObjectNameLength    : Byte;
    ObjectName          : Array[1..48] of char;
    SegmentNumber       : Byte;
    PropertyNameLength  : Byte;
    PropertyName        : Array[1..15] of char;
  end;

  ReplyBuffer = Record
    ReplyBufferLength : Word;
    PropertyValue     : Array[1..128] of char;
    MoreSegments      : Byte;
    PropertyFlags     : Byte;
  end;

Var
  Request : RequestBuffer;
  Reply   : ReplyBuffer;
  PropertyName : String[15];
  Counter : Byte;
  Temp    : String[128];

begin
  PropertyName := 'IDENTIFICATION';
  Request.RequestBufferLength := SizeOf(Request) - 2;
  Request.Code := $3D;
  Request.SegmentNumber := 1;
  Request.ObjectType := $0100;
  Request.ObjectNameLength := SizeOf(Request.ObjectName);
  FillChar(Request.ObjectName, SizeOf(Request.ObjectName), #0);

  For Counter := 1 to length(User_Name) do
    Request.ObjectName[Counter] := User_Name[Counter];

  Request.PropertyNameLength := SizeOf(Request.PropertyName);
  FillChar(Request.PropertyName, SizeOf(Request.PropertyName), #0);

  For Counter := 1 to Length(PropertyName) do
    Request.PropertyName[Counter] := PropertyName[Counter];
  Reply.ReplyBufferLength := SizeOf(Reply) - 2;

 asm
  PUSH SS
  PUSH DS
  MOV AH, $E3;
  LEA SI, Request
  PUSH SS
  POP DS
  LEA DI,Reply
  PUSH SS
  POP ES
  INT 21H
  POP DS
  POP SS
 end;

  Temp := '';
  Counter := 1;
  While (Reply.PropertyValue[Counter] <> #0) do
  begin
    Temp := Temp + Reply.PropertyValue[Counter];
    inc(Counter);
  end;
  Result := Temp;
end;




//----------------------------------------------



initialization
  AplicacionIni := TIniFile.Create(ExtractFilePath(ParamStr(0)) + ArchivoIni);
  CoInitialize(nil);
  DecimalSeparator:='.';
  ConexionDB:=TConexionDB.Create;
  AplicacionIni.Free;
finalization
  ConexionDB.Free;



end.
